
*{margin: 0;
  padding: 0;
}
/* .App{
  background-color: beige;
} */
.header_outer_container {
    position: sticky;
    top: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: transparent;
    height: 10vh;
    color: white;
    transition: all 0.5s ease-in;
    z-index: 1;
    /* Optional: Add background color for active state */
    /* background-color: rgb(148, 132, 132); */
}

.nav_black {
    background-color: rgb(20, 20, 20);
}

.header_container {
    width: 90%;
    display: flex;
    justify-content: space-between;
    align-items: center;
}


/*Netflix Clone Project Documentation
This documentation provides a structured approach to creating a Netflix clone application using React and Vite, fetching data from The Movie Database (TMDb), and deploying it on GitHub Pages.

Step 1: Initial Setup
Create a Repository:

Create a new GitHub repository and clone it locally.
Initialize the Project:

Set up a React application with Vite:
bash
Copy code
npm create vite@latest
Clean Up:

Remove unnecessary files and boilerplate code.
Inside App.js, create a <div> as a placeholder to verify the setup.
Initial Commit:

Push the initial setup to GitHub to verify that the application is working correctly.
Project Structure
The project is organized into four main sections:

Header
Footer
Banner
Main Section (Rows)
Step 2: Organize Project Files
Create Folders:

Inside src, create the following folders for a clean structure:
Pages: Create Home.jsx to act as a container for all components.
Components: Create sub-folders for Header and Footer components.
Header Component:

Create Header.jsx and header.css for the Header.
Split the header into two parts:
Left Part: A <ul> with 8 <li> items for navigation.
Right Part: A <ul> with 4 <li> items for account-related actions.
Download the Netflix logo and save it in an assets folder.
Material Icons & Fonts:

Install Material Icons for enhanced UI:
bash
Copy code
npm install @mui/icons-material @mui/material @emotion/styled @emotion/react
Import the required icons:
SearchIcon, NotificationsNoneIcon, AccountBoxIcon, ArrowDropDownIcon
Import Google Fonts for styling:
css
Copy code
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&family=Lexend:wght@400;500;600;700;800;900&display=swap');
CSS Variables:

Set up global styling variables in :root:
css
Copy code
:root {
  --font-base: 'Lexend', sans-serif;
  --font-second-base: 'Inter', sans-serif;
  --bg-color: #111111;
  --primary-color: #ffffff;
  --secondary-color: #e50914;
}
Footer Component:

Import additional icons (FacebookOutlinedIcon, InstagramIcon, YouTubeIcon) and add them with relevant links.
Create footer.css for footer styling.
Commit:

Push the header and footer components to GitHub:
bash
Copy code
git push -u origin main
Set line ending configuration to avoid LF/CRLF warnings:
bash
Copy code
git config --global core.autocrlf true
Step 3: Fetching Data from TMDb
TMDb API:

Obtain an API key from TMDb by creating an account and visiting the API settings page.
Store the API key in a .env file for security:
bash
Copy code
VITE_API_KEY=your_api_key_here
Add .env to .gitignore to prevent the API key from being exposed.
Setup Axios for API Calls:

Install Axios:
bash
Copy code
npm install axios
In src/utils, create two files:
axios.js: Define the base URL for API calls.
requests.js: Create variables for each endpoint, including:
fetchTrending, fetchTopRatedMovies, fetchActionMovies, etc.
Step 4: Banner Component
Create Banner Component:

Inside src/components, create Banner.jsx.
Define state for movie and setMovie.
Use axios to fetch the required movie data.
Randomly Select Movie:

Use Math.random() and Math.floor() to select a random movie from the fetched data.
Truncate Function:

Add a helper function to shorten long descriptions:
javascript
Copy code
function truncate(str, n) {
  return str?.length > n ? str.substr(0, n - 1) + "..." : str;
}
Commit and Push:

Push the Banner component to GitHub.
Step 5: Rows and Row List Components
Create Reusable Row Component:

Inside src/components, create Rows.jsx and RowList.jsx.
RowList.jsx will pass different props (e.g., title, fetchUrl, isLarge) to Rows.jsx.
Display Movies by Category:

Fetch and display movie images based on props.
Use the isLargeRow prop to toggle between poster and backdrop images.
Trailer Functionality:

To view trailers on click, install required packages:
bash
Copy code
npm install movie-trailer react-youtube
In Rows.jsx, implement handleClick to find and display the YouTube trailer.
Step 6: Trailer Functionality
HandleClick Function:

handleClick is designed to toggle the YouTube trailer for a movie.
Use movieTrailer() from the movie-trailer package to find the trailer URL.
Extract the video ID using URLSearchParams and set it to trailerUrl.
Trailer Display:

Conditionally render the trailer using <YouTube /> based on trailerUrl.
Step 7: Deployment to GitHub Pages
Install gh-pages:

Install gh-pages for deployment:
bash
Copy code
npm install gh-pages --save-dev
Update package.json:

Add a homepage key with your GitHub repository URL:
json
Copy code
"homepage": "https://<your-username>.github.io/<your-repo-name>/"
Add deployment scripts:
json
Copy code
"predeploy": "npm run build",
"deploy": "gh-pages -d dist"
Deploy:

Run the deployment command:
bash
Copy code
npm run deploy*/
